package com.example.icompile.lexer.setup

import java.io.*
import java.util.*

/**
 * TokenSetup class is used to read the tokens from file *tokens*
 * and automatically build the 2 classes/files *TokenType.java*
 * and *Sym.java*<br></br>
 * Therefore, if there is any change to the tokens then we only need to
 * modify the file *tokens* and run this program again before using the
 * compiler
 */
class TokenSetup internal constructor() {
    private var type: String? = null
    private var value // token type/value for new token
            : String? = null
    private var tokenCount = 0
    private var `in`: BufferedReader? = null
    private var table: PrintWriter? = null
    private var symbols // files used for new classes
            : PrintWriter? = null// attempt to build new StringTokenizer when at end of file

    /**
     * read next line which contains token information;<br></br>
     * each line will contain the token type used in lexical analysis and
     * the printstring of the token: e.g.<br></br>
     *  * Program program
     *  * Int int
     *  * BOOLean boolean
     */
    @get:Throws(IOException::class)
    val nextToken: Unit
        get() {
            try {
                val st = StringTokenizer(`in`!!.readLine())
                type = st.nextToken()
                value = st.nextToken()
            } catch (e: NoSuchElementException) {
                println("***tokens file does not have 2 strings per line***")
//                System.exit(1)
            } catch (ne: NullPointerException) {
                // attempt to build new StringTokenizer when at end of file
                throw IOException("***End of File***")
            }
            tokenCount++
        }

    /**
     * initTokenClasses will create the 2 files
     */
    fun initTokenClasses() {
        table!!.println("package lexer;")
        table!!.println(" ")
        table!!.println("/**")
        table!!.println(" *  This file is automatically generated<br>")
        table!!.println(" *  it contains the table of mappings from token")
        table!!.println(" *  constants to their Symbols")
        table!!.println("*/")
        table!!.println("public class TokenType {")
        table!!.println("   public static java.util.HashMap<Tokens,Symbol> tokens = new java.util.HashMap<Tokens,Symbol>();")
        table!!.println("   public TokenType() {")
        symbols!!.println("package lexer;")
        symbols!!.println(" ")
        symbols!!.println("/**")
        symbols!!.println(" *  This file is automatically generated<br>")
        symbols!!.println(" *  - it contains the enumberation of all of the tokens")
        symbols!!.println("*/")
        symbols!!.println("public enum Tokens {")
        symbols!!.print("  BogusToken")
        while (true) {
            try {
                nextToken
            } catch (e: IOException) {
                break
            }
            val symType = "Tokens.$type"
            table!!.println(
                "     tokens.put(" + symType +
                        ", Symbol.symbol(\"" + value + "\"," + symType + "));"
            )
            if (tokenCount % 5 == 0) {
                symbols!!.print(",\n    $type")
            } else {
                symbols!!.print(",$type")
            }
        }
        table!!.println("   }")
        table!!.println("}")
        table!!.close()
        symbols!!.println("\n}")
        symbols!!.close()
        try {
            `in`!!.close()
        } catch (e: Exception) {
        }
    }

    companion object {
        @JvmStatic
        fun main(args: Array<String>) {
            TokenSetup().initTokenClasses()
        }
    }

    init {
        try {
            println("User's current working directory: " + System.getProperty("user.dir"))
            val sep = System.getProperty("file.separator")
            `in` =
                BufferedReader(FileReader("src" + sep + "lexer" + sep + "setup" + sep + "tokens"))
            table =
                PrintWriter(FileOutputStream("src" + sep + "lexer" + sep + "TokenType.java"))
            symbols =
                PrintWriter(FileOutputStream("src" + sep + "lexer" + sep + "Tokens.java"))
        } catch (e: Exception) {
            println(e)
        }
    }
}
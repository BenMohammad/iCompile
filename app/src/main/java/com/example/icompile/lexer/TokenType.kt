package com.example.icompile.lexer

import java.util.*

/**
 * This file is automatically generated<br></br>
 * it contains the table of mappings from token
 * constants to their Symbols
 */
class TokenType {
    companion object {
        var tokens =
            HashMap<Tokens, Symbol?>()
    }

    init {
        tokens[Tokens.Program] = Symbol.symbol(
            "program",
            Tokens.Program
        )
        tokens[Tokens.Int] = Symbol.symbol(
            "int",
            Tokens.Int
        )
        tokens[Tokens.Boolean] = Symbol.symbol(
            "boolean",
            Tokens.Boolean
        )
        tokens[Tokens.String] = Symbol.symbol(
            "string",
            Tokens.String
        )
        tokens[Tokens.If] = Symbol.symbol(
            "if",
            Tokens.If
        )
        tokens[Tokens.Then] = Symbol.symbol(
            "then",
            Tokens.Then
        )
        tokens[Tokens.Else] = Symbol.symbol(
            "else",
            Tokens.Else
        )
        tokens[Tokens.While] = Symbol.symbol(
            "while",
            Tokens.While
        )
        tokens[Tokens.Void] = Symbol.symbol(
            "void",
            Tokens.Void
        )
        tokens[Tokens.Function] = Symbol.symbol(
            "function",
            Tokens.Function
        )
        tokens[Tokens.Return] = Symbol.symbol(
            "return",
            Tokens.Return
        )
        tokens[Tokens.Identifier] = Symbol.symbol(
            "<id>",
            Tokens.Identifier
        )
        tokens[Tokens.Integer] = Symbol.symbol(
            "<int>",
            Tokens.Integer
        )
        tokens[Tokens.Float] = Symbol.symbol(
            "<float>",
            Tokens.Float
        )
        tokens[Tokens.String] = Symbol.symbol(
            "<string>",
            Tokens.String
        )
        tokens[Tokens.LeftBrace] = Symbol.symbol(
            "{",
            Tokens.LeftBrace
        )
        tokens[Tokens.RightBrace] = Symbol.symbol(
            "}",
            Tokens.RightBrace
        )
        tokens[Tokens.LeftParen] = Symbol.symbol(
            "(",
            Tokens.LeftParen
        )
        tokens[Tokens.RightParen] = Symbol.symbol(
            ")",
            Tokens.RightParen
        )
        tokens[Tokens.Comma] = Symbol.symbol(
            ",",
            Tokens.Comma
        )
        tokens[Tokens.Assign] = Symbol.symbol(
            "=",
            Tokens.Assign
        )
        tokens[Tokens.Equal] = Symbol.symbol(
            "==",
            Tokens.Equal
        )
        tokens[Tokens.NotEqual] = Symbol.symbol(
            "!=",
            Tokens.NotEqual
        )
        tokens[Tokens.Less] = Symbol.symbol(
            "<",
            Tokens.Less
        )
        tokens[Tokens.Greater] = Symbol.symbol(
            ">",
            Tokens.Greater
        )
        tokens[Tokens.GreaterEqual] = Symbol.symbol(
            ">=",
            Tokens.GreaterEqual
        )
        tokens[Tokens.LessEqual] = Symbol.symbol(
            "<=",
            Tokens.LessEqual
        )
        tokens[Tokens.Plus] = Symbol.symbol(
            "+",
            Tokens.Plus
        )
        tokens[Tokens.Minus] = Symbol.symbol(
            "-",
            Tokens.Minus
        )
        tokens[Tokens.Or] = Symbol.symbol(
            "|",
            Tokens.Or
        )
        tokens[Tokens.And] = Symbol.symbol(
            "&",
            Tokens.And
        )
        tokens[Tokens.Multiply] = Symbol.symbol(
            "*",
            Tokens.Multiply
        )
        tokens[Tokens.Divide] = Symbol.symbol(
            "/",
            Tokens.Divide
        )
        tokens[Tokens.Comment] = Symbol.symbol(
            "//",
            Tokens.Comment
        )
        tokens[Tokens.Not] = Symbol.symbol(
            "!",
            Tokens.Not
        )
        tokens[Tokens.DoubleQuote] = Symbol.symbol(
            "\"",
            Tokens.DoubleQuote
        )
    }
}